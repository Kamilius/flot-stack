// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var init, options;
    options = {
      series: {
        stack: null
      }
    };
    init = function(plot) {
      var baseArray, baseHash, countBases, stackData;
      baseHash = {};
      baseArray = [];
      countBases = function(plot, s, data, datapoints) {
        var x, _i, _len, _ref, _ref1;
        console.log('count ' + s.label);
        if (datapoints.pointsize != null) {
          _ref1 = datapoints.points;
          _ref = datapoints.pointsize;
          for ((_ref > 0 ? (_i = 0, _len = _ref1.length) : _i = _ref1.length - 1); _ref > 0 ? _i < _len : _i >= 0; _i += _ref) {
            x = _ref1[_i];
            if (baseHash[x]) {
              baseHash[x].cnt++;
            } else {
              baseHash[x] = {
                cnt: 1,
                pos: 0,
                neg: 0
              };
              baseArray.push(x);
            }
          }
        } else {
          data.forEach(function(point) {
            x = point[0];
            if (baseHash[x]) {
              return baseHash[x]++;
            } else {
              baseHash[x] = {
                cnt: 1,
                pos: 0,
                neg: 0
              };
              return baseArray.push(x);
            }
          });
        }
        baseArray = baseArray.sort(function(a, b) {
          return a > b;
        });
      };
      stackData = function(plot, s, data, datapoints) {
        var base, i, points, pointsHash, ps, x, y;
        console.log('stack ' + s.label);
        if ((s.stack == null) || s.stack === false) {
          return;
        }
        points = datapoints.points;
        pointsHash = {};
        ps = datapoints.pointsize;
        i = 0;
        while (i < points.length) {
          x = points[i];
          y = points[i + 1];
          if (y > 0) {
            pointsHash[x] = [x, y + baseHash[x].pos, baseHash[x].pos];
            baseHash[points[i]].pos += y;
          } else {
            pointsHash[x] = [x, y + baseHash[x].neg, baseHash[x].neg];
            baseHash[points[i]].neg += y;
          }
          i += ps;
        }
        for (x in baseHash) {
          base = baseHash[x];
          if (pointsHash[x] == null) {
            pointsHash[x] = [x, base.pos, base.pos];
          }
        }
        ps = 3;
        points = [];
        i = 0;
        while (i < baseArray.length) {
          if (pointsHash[baseArray[i]] != null) {
            points = points.concat(pointsHash[baseArray[i]]);
          }
          i++;
        }
        datapoints.points = points;
        datapoints.pointsize = ps;
      };
      plot.hooks.processRawData.push(countBases);
      plot.hooks.processRawData.push(stackData);
    };
    $.plot.plugins.push({
      init: init,
      options: options,
      name: 'stacksplit',
      version: '0.1'
    });
  })(jQuery);

}).call(this);

/*
//@ sourceMappingURL=jquery.flot.simplestack.map
*/
